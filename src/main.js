import { Telegraf, session } from 'telegraf'
import { message } from 'telegraf/filters'
import config from 'config'
import mongoose from 'mongoose'
import { UserModel } from './models/user.model.js'
import {
  proccessVoiceMessage,
  proccessTextMessage,
} from './logic.js'
import { initCommand, normalize } from './utils.js'

const bot = new Telegraf(config.get('TELEGRAM_TOKEN'))

bot.telegram.setMyCommands([
  { command: '/start', description: '–°—Ç–∞—Ä—Ç –±–æ—Ç–∞' },
  { command: '/help', description: '–ü–æ–º–æ—â—å' },
  { command: '/advert', description: '–†–µ–∫–ª–∞–º–∞' },
  { command: '/new', description: '–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥' },
])

bot.use(session())
bot.use(normalize())

export const emptySession = () => ({
  messages: [],
  conversations: [],
})

bot.command('new', async (ctx) => {
  ctx.session = emptySession()
  await ctx.reply('–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. –ñ–¥—É –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
})

bot.command(
  'start',
  async (ctx) => {
    const username = ctx.message.from.first_name;
    await initCommand(
      `–ü—Ä–∏–≤–µ—Ç, <b>${username}</b>!\n\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ChatGPT.\n\n <b>–ß–∞—Ç–±–æ—Ç —É–º–µ–µ—Ç:</b>\n  1. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n  2. –ü–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã\n  3. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –ª—é–±–æ–π\n  4. –ü–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ \n  5. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n\n ‚úâÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n üé§ –ß—Ç–æ –±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≥–æ–ª–æ—Å–æ–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤ –Ω–∏–∂–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É –≤–æ–∑–ª–µ —á–∞—Ç–∞ –∏ –∑–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n ü§ñ –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –±–æ—Ç–æ–º –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏ –ø–æ–ª—å–∑—É—é—Ç—Å—è –µ—â—ë 1.5 –º–ª–Ω —á–µ–ª–æ–≤–µ–∫, –æ–Ω –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.`
    )(ctx);
  }
);

bot.command('help', async (ctx) => {
  await ctx.reply('–ï—Å–ª–∏ –±–æ—Ç –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ openAI. –î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ (–∫–æ–º–∞–Ω–¥–∞ /new).')
})

bot.command('advert', async (ctx) => {
  await ctx.reply('–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–µ–∫–ª–∞–º—ã —Å—Ç—É—á–∞—Ç—å—Å—è —Å—é–¥–∞ https://t.me/pushkin9999')
})


bot.command('admin', async (ctx) => {
  if (ctx.message.from.id !== config.get('ADMIN_TG_ID')) return
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç –ï–≥–æ—Ä')
})

bot.command('users', async (ctx) => {
  const count = await UserModel.countDocuments()
  await ctx.reply(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${count}`)
})

bot.on(message('voice'), proccessVoiceMessage)

bot.on(message('text'), proccessTextMessage)

async function start() {
  try {
    await mongoose.connect(config.get('MONGO_URI'), {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    })

    bot.launch()

    console.log('MongoDB Connected and bot started.')

    process.on('uncaughtException', (err) => {
      console.error('–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', err)
      // process.exit(1)
    })

    process.on('unhandledRejection', (reason, promise) => {
      console.error({ unhandledRejection: { reason, promise } })
    })

    // process.once('SIGINT', () => bot.stop('SIGINT'))
    // process.once('SIGTERM', () => bot.stop('SIGTERM'))
  } catch (e) {
    console.log('Server Error Db ebat', e.message)
    process.exit(1)
  }
}

start()
